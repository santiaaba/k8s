const k8s_api = require("./k8s_api_call.js")
const valid_name = /^[a-z][a-z0-9]+$/

module.exports = {

nuevo: function(req,res,db){
	function rallbackNamespace(s,b){
		/* Elimnar su entrada en la base de datos */
		sql = 'delete from namespace where name = "' + req.body.name + '"'
		console.log(sql)
		db.query(sql)
        .then( rows => {
			console.log(s + " : " + b)
			res.status(s).send(b)
		})
        .catch( rows => {
				res.status(500).send('{"error":"Base de datos no responde"}')
        })
	}

    /* Verificaciones previas */
    /* validez de datos */
       console.log("Revisando: " + req.body.name)
    if(! valid_name.test(req.body.name)){
        res.status(410).send('{"error":"Parametros incorrectos"}')
        return
    }
    /* Existencia usuario */
    sql = 'select id from user where id =' + req.params.userid
    db.query(sql)
    .then( rows => {
        if(rows.length != 1){
            res.status(410).send('{"error":"Usuario inexistente"}')
            return
        }
	    sql = 'insert into namespace(name) values ("' + req.body.name + '")'
        console.log(sql)
        db.query(sql)
    })
    .catch( err => {
        res.status(410).send('{"error":"Database error"}')
    })
    .then( rows => {
		var diccionario = new Array
		diccionario.push({'regex':'_namespace_name_','value':req.body.name})
		/* Creamos el namespace */
		k8s_api.call('/api/v1/namespaces','POST','alta_namespace.yaml',diccionario,
		function(s,b){
			/* Creamos las politicas */
			var url = '/apis/networking.k8s.io/v1/namespaces/' + req.body.name + '/networkpolicies'
			k8s_api.call(url,'POST','alta_networkpolicy.yaml',diccionario,
			function(){
				console.log(s + " : " + b)
				res.send(b)
			},
			function(){
				console.log(s + " : " + b)
				rallbackNamespace(s,b)
			})
		},
		function(s,b){
			rallbackNamespace(s,b)
		})
	})
    .catch( err => {
		if(err){
			console.log(err)
			console.log(err.code)
			switch(err.code){
				case 'ER_DUP_ENTRY':
					res.status(401).send('{"error":"Ya existe el namespace segun la base de datos"}')
					break
				default :
					res.status(500).send('{"error":"Base de datos no responde"}')
			}
		}
    })
},

list: function(idUsuario){
	/* Listado de namespaces del usuario */
},

show: function(req,res,pool){
	/* Retorna la informaci√≥n de un namespace en particular */

    if(! valid_name.test(req.body.name)){
        res.status(410).send('{"error":"Parametros incorrectos"}')
        return
    }

	k8s_api.call('/api/v1/namespaces','POST','alta_namespace.yaml',diccionario,
    function(s,b){
        res.send(b)
    },
    function(s,b){
        res.status(s).send(b)
    })
},

drop: function(namespace_name){
	/* Elimina un namespace */
}

} /* Fin del modulo */
